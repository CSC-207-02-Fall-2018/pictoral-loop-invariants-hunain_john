Problem 1)
We chose the exit condition where lspot and rspot pass each other so we can
be sure that every element is examined. 

Problem 2)
Output from testing Partition.java:
[2, 1, 3, 4, 6, 5]	MID: 2
[5, 3, 2, 4, 1, 6]	MID: 5
[1, 5, 2, 4, 3, 6]	MID: 0
[4, 1, 2, 5, 6, 5]	MID: 3
[3, 1, 2, 4, 6, 5]	MID: 4
[3]	MID: 0
[5, 6]	MID: 1

Why its right: It performed the correct partition for the parameters we
gave it on arrays of multiple sizes and degrees of sorting. We therefore
believe that it works, especially on the edge case of array of size 2.

Problem 3)
Part of the output from testing Median.java for select:
First array: 
Smallest1:1
Smallest2:2
Smallest3:3
Smallest4:4
Smallest5:5
Smallest6:6

Second array: 
Smallest1:1
Smallest2:2
Smallest3:3
Smallest4:4
Smallest5:5
Smallest6:6

Why its right: In a array containing the values 1-6, the nth smallest value
is equal to n, which is what this testing shows us. We tested this on two
arrays with different ordering, therefore we are confident that it works. 
Problem 4)
Part of the output from testing Median.java for median:
Median1:1
Median2:3
Median3:3
Median4:7
Median5:3
Median6:4

Why this works: We tested this on multiple arrays with different values in
different orderings, all of which returned the correct median. Therefore we
are confident this works. NOTE: We consider the median to be contained
within the set of data, even if the array is of even length. So we don't
average the two middle values, instead we always pick the higher of the two
as the median. given that the function header we were given told us to
return an int, this makes more sense than taking an average.

Problem 5)
Output from testing Quicksort.java:
[1]
[1, 2]
[1, 2, 3]
[1, 3, 7, 8]
[1, 2, 3, 7, 8]
[2, 3, 4, 4, 7, 8]

Why its right: All of the input arrays (as seen in main method) were of
various lengths and degrees of sorting before quicksort was run on them. We
can see that they are all now sorted, thus we believe that the method
works.

Problem 6)
(first means leftmost) (Note: We implemented 3 of the 4)
Invariant A


Invariant B
lastWhite = index of last examined white value 
firstBlue = index of first blue value (examined) 
lastRed = index of the last examined red value (examined)
  

Invariant C
lastRed = index of last red value
firstWhite = index of first white value
firstBlue = index of first blue value

Problem 7)
Invariant B:
lastWhite  = -1 (Start before the beginning of the array, since nothing has
been examined)
firstBlue = a.length

Problem 8)
Implementations in DutchNationalFlag.java

Problem 9)
Testing of invariantA implementation:
[RED, WHITE, BLUE]
[RED, WHITE, BLUE]
[RED, WHITE, BLUE]
[RED, WHITE, BLUE]
[RED, WHITE, BLUE]
[RED, WHITE, BLUE]
[RED, RED, RED, WHITE, WHITE, WHITE, BLUE, BLUE, BLUE]
[RED]
[WHITE]
[BLUE]
[RED, BLUE]
[RED, WHITE]
[WHITE, BLUE]
[WHITE, BLUE]
[RED, BLUE]
[WHITE, BLUE]
Testing of invariantB implementation:
[RED, WHITE, BLUE]
[RED, WHITE, BLUE]
[RED, WHITE, BLUE]
[RED, WHITE, BLUE]
[RED, WHITE, BLUE]
[RED, WHITE, BLUE]
[RED, RED, RED, WHITE, WHITE, WHITE, BLUE, BLUE, BLUE]
[RED]
[WHITE]
[BLUE]
[RED, BLUE]
[RED, WHITE]
[WHITE, BLUE]
[WHITE, BLUE]
[RED, BLUE]
[WHITE, BLUE]
Testing of invariantC implementation
[RED, WHITE, BLUE]
[RED, WHITE, BLUE]
[RED, BLUE, WHITE]
[RED, WHITE, BLUE]
[RED, WHITE, BLUE]
[RED, WHITE, BLUE]
[RED, RED, RED, WHITE, WHITE, BLUE, WHITE, BLUE, BLUE]
[RED]
[WHITE]
[BLUE]
[RED, BLUE]
[RED, WHITE]
[WHITE, BLUE]
[WHITE, BLUE]
[RED, BLUE]
[BLUE, WHITE]

Why they all 3  work: We tested every permutation of the three, two, and
single element array, and a totally jumbled array. All were successful.